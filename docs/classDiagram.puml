@startuml Data Generator
skinparam classAttributeIconSize 0

class Server{
+ run(): void
- construct_request_processor(): void
- processRequest(): void
- valid_api?(api: ExternalAPI, method: String): boolean
}

class App << (S,#FF7700) Singleton >> {
    + config: Config
    + bucket_service: BucketService
    + App()
    {static}+ run(port: Integer): Server
    + interface(): App
}

class RequestProcessor{
    + initialize(): RequestProcessor
    + Process(): String
}

class ExternalAPI{
    + initialize(options: Map): ExternalAPI
}

class SearchCH{
    + getStationboard(options: Map)): String
    + getConnections(option: Map): String
}

interface formatter{
    - DestinationDataStructure: Map
    - originDataStructure: Map
    + initialize(originDataStructure: Map = {}): formatter
    + format(data: Map): String
}

class DeutschebahnCOM {
}

class SheneoIO {
}

class SncfCOM{
}

class JSONformatter{
}

class PDFformatter{
    + format(data: Map): String
    - filenamer(date: DateTime, request: Map): String
    - create_response(filename): String
}

class Timetable {
  - table_data: Array
  + initialize(): void
  + document(): Prawn::Document
  + draw_logo(path: String): void
  + headers=(headers: Array): void
  + draw_table(options: Map): void
  + draw_heading(date: DateTime): void
  + save(filename: String): void
  + stop=(stop: Map): void
}


class Dotenv{
}

class Config{
    'available regions will have one or more API classes associated with it
    + regionAPI: Map
    + formatter: Map
    + config: Map
    + load(): void
    + get(key: String): String|Map
}

class BucketService {
    + default_bucket: String
    + client: AWS::S3::S3Client
    + BucketService(client: AWS::S3::S3Client, default_bucket: String)
    + upload(content: String, filename: String, bucket_name: String): AWS::S3::Types::PutObjectOutput
    + get_presigned_url(object_key: String): String
}

RequestProcessor -right-> formatter
formatter <|.. JSONformatter
formatter <|.. PDFformatter

PDFformatter -right-> Timetable

ExternalAPI .left.|> HTTParty
SearchCH .up.|> ExternalAPI
DeutschebahnCOM .up.|> ExternalAPI
SheneoIO .up.|> ExternalAPI
SncfCOM .up.|> ExternalAPI

Server -up-> RequestProcessor
RequestProcessor -left-> ExternalAPI

App .right.> Server
App -right-> Config
BucketService -right-> AWS::S3

'Dotenv file not a class
ExternalAPI -left-> Dotenv

'Main will be just a file, maybe called index, doesn't really matter
main -up-> App
Timetable -right-> Prawn

package Prawn <<Frame>> {
}

package AWS <<Frame>> {
    package S3 <<Frame>> {
    }
}

@enduml