@startuml Data Generator
skinparam classAttributeIconSize 0

class Server {
  + {static} startServer!() : void
  - constructRequestProcessor(country : String, method : String, mimetype : String) : RequestProcessor
  - getFormatter(mimetype : String) : Formatter
  - getExternalApi(country : String, method : String) : ExternalAPI
  - validApi(api : Class, method : String) : boolean
  - processRequest(requestProcessor : RequestProcessor, options : Hash) : String
}

Server --|> Sinatra::Base

class App {
  + {static} run() : void
  - setupContainer() : void
  - registerBasicComponents() : void
  - registerServices() : void
}

class Container extends Dry {
  + {static} register(key : Symbol, options : Hash) : void
}

class RequestProcessor {
  - formatter : Formatter
  - externalApi : ExternalAPI
  - logger : MultiLogger
  + initialize(formatter : Formatter, externalApi : ExternalAPI, **deps) : void
  + process(options : Hash, method : String) : String
}

abstract class ExternalAPI {
  - options : Hash
  + initialize() : void
}

class SearchCH {
  + getStationboard(options : Hash) : HTTParty::Response
  + getConnections(options : Hash) : HTTParty::Response
}

class JSONFormatter {
  - destinationDataStructure : Hash
  - originDataStructure : Hash
  + format(data : Hash) : String
}

class XMLFormatter {
  + format(data : Hash) : String
  - jsonToXml(data : Hash, rootName : String) : String
  - parseJsonObject(data : Object, xml : Nokogiri::XML::Builder) : void
  - processHash(hash : Hash, xml : Nokogiri::XML::Builder) : void
  - processArray(array : Array, xml : Nokogiri::XML::Builder) : void
}

class PDFFormatter {
  - logger : MultiLogger
  - bucketService : Services::BucketAdapter
  - config : Config
  - destinationDataStructure : Hash
  - originDataStructure : Hash
  + initialize(originDataStructure : Hash = {}, **deps) : void
  + format(data : Hash) : String
  - createTimetable(data : StationBoardResponse, date : DateTime) : Timetable
  - formatConnectionsData(connections : Array) : Array
  - filenamer(date : DateTime, request : Hash) : String
  - createResponse(url : String) : String
}

class Timetable {
  - tableData : Array
  - stop : Object
  + initialize() : void
  + document() : Prawn::Document
  + drawLogo(path : String) : void
  + <set>headers(headers : Array) : void
  + drawTable(options : Hash) : void
  + drawHeading(date : DateTime) : void
  + save(filename : String) : void
  + <set>stop(stop : Object) : void
}

class Config {
  - regionApi : Hash
  - acceptedMimetypes : Array
  - formatters : Hash
  - configData : Hash
  + initialize(configFile : String = "config.yml") : void
  + [](key : String) : Object
  - loadConfig(configFile : String) : void
  - setupApiMapping() : void
  - setupFormatters() : void
}

class BucketAdapter {
  - client : BucketSdk
  - logger : MultiLogger
  + initialize(baseUrl : String, **deps) : void
  + upload(content : String, filename : String) : Hash
}

class MultiLogger {
  + info(message : String) : void
  + debug(message : String) : void
  + error(message : String) : void
  + warn(message : String) : void
}

package Dry {
  package Container <<frame>> {
  }
  package AutoInject <<frame>> {
  }
}

package Sinatra {
  class Base
}

package HTTParty {
}

App ..> Server : creates >
Container <.. App : uses

Import --> Container : uses

Server --> "1" RequestProcessor : creates >

RequestProcessor --> "1" Formatter : uses >
RequestProcessor --> "1" ExternalAPI : uses >

ExternalAPI <|-.- HTTParty : includes
SearchCH --|> ExternalAPI : extends

JSONFormatter ..|> Formatter : implements
XMLFormatter ..|> Formatter : implements
PDFFormatter ..|> Formatter : implements

PDFFormatter --> "1" Timetable : creates >
PDFFormatter --> "1" BucketAdapter : uses >

Timetable <|-.- Prawn::View : includes

BucketAdapter --> BucketSdk : uses >

App --> "1" Config : uses >

' MultiLogger relationships
App ..> MultiLogger : creates >
Server --> "1" MultiLogger : uses >
RequestProcessor --> "1" MultiLogger : uses >
PDFFormatter --> "1" MultiLogger : uses >
BucketAdapter --> "1" MultiLogger : uses >

' Dependency injection relationships
Server <.. Import : injects dependencies
BucketAdapter <.. Import : injects dependencies
RequestProcessor <.. Import : injects dependencies
PDFFormatter <.. Import : injects dependencies

package Prawn <<Frame>> {
}

package BucketSdk <<Frame>> {
}

interface Formatter {
  + format(data : Hash) : String
}

@enduml